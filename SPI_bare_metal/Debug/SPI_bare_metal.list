
SPI_bare_metal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000300  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  080003bc  080003bc  000103bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  4 .ARM          00000000  080003c4  080003c4  000103cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003c4  080003cc  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003c4  080003c4  000103c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003c8  080003c8  000103c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000103cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080003cc  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080003cc  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000103cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000004a9  00000000  00000000  000103f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000013b  00000000  00000000  0001089d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000068  00000000  00000000  000109d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000050  00000000  00000000  00010a40  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000db64  00000000  00000000  00010a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000051f  00000000  00000000  0001e5f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0004e1fd  00000000  00000000  0001eb13  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0006cd10  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000d4  00000000  00000000  0006cd8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	20000000 	.word	0x20000000
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080003a4 	.word	0x080003a4

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000004 	.word	0x20000004
 8000100:	080003a4 	.word	0x080003a4

08000104 <GPIO_Init>:

/*
 * GPIO_Init: Initialize PA11, PA12, PD8, PD9 for SPI communication
 * PC8 is used as SPI Chip Select
 */
void GPIO_Init(void) {
 8000104:	b580      	push	{r7, lr}
 8000106:	af00      	add	r7, sp, #0

	RCC->IOPENR = 0x1; //enable Port A
 8000108:	4b2c      	ldr	r3, [pc, #176]	; (80001bc <GPIO_Init+0xb8>)
 800010a:	2201      	movs	r2, #1
 800010c:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= (1 << 3); //enable Port D
 800010e:	4b2b      	ldr	r3, [pc, #172]	; (80001bc <GPIO_Init+0xb8>)
 8000110:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000112:	4b2a      	ldr	r3, [pc, #168]	; (80001bc <GPIO_Init+0xb8>)
 8000114:	2108      	movs	r1, #8
 8000116:	430a      	orrs	r2, r1
 8000118:	635a      	str	r2, [r3, #52]	; 0x34
	RCC->IOPENR |= (1 << 2); //enable Port C
 800011a:	4b28      	ldr	r3, [pc, #160]	; (80001bc <GPIO_Init+0xb8>)
 800011c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800011e:	4b27      	ldr	r3, [pc, #156]	; (80001bc <GPIO_Init+0xb8>)
 8000120:	2104      	movs	r1, #4
 8000122:	430a      	orrs	r2, r1
 8000124:	635a      	str	r2, [r3, #52]	; 0x34
	GPIOC->MODER &= ~(3 << 26);	//set PC13 as input
 8000126:	4b26      	ldr	r3, [pc, #152]	; (80001c0 <GPIO_Init+0xbc>)
 8000128:	681a      	ldr	r2, [r3, #0]
 800012a:	4b25      	ldr	r3, [pc, #148]	; (80001c0 <GPIO_Init+0xbc>)
 800012c:	4925      	ldr	r1, [pc, #148]	; (80001c4 <GPIO_Init+0xc0>)
 800012e:	400a      	ands	r2, r1
 8000130:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &= ~(1 << 17);	//set PC8 as output
 8000132:	4b23      	ldr	r3, [pc, #140]	; (80001c0 <GPIO_Init+0xbc>)
 8000134:	681a      	ldr	r2, [r3, #0]
 8000136:	4b22      	ldr	r3, [pc, #136]	; (80001c0 <GPIO_Init+0xbc>)
 8000138:	4923      	ldr	r1, [pc, #140]	; (80001c8 <GPIO_Init+0xc4>)
 800013a:	400a      	ands	r2, r1
 800013c:	601a      	str	r2, [r3, #0]

	RCC->APBENR2 |= (1 << 12); //SPI1 clock enable
 800013e:	4b1f      	ldr	r3, [pc, #124]	; (80001bc <GPIO_Init+0xb8>)
 8000140:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000142:	4b1e      	ldr	r3, [pc, #120]	; (80001bc <GPIO_Init+0xb8>)
 8000144:	2180      	movs	r1, #128	; 0x80
 8000146:	0149      	lsls	r1, r1, #5
 8000148:	430a      	orrs	r2, r1
 800014a:	641a      	str	r2, [r3, #64]	; 0x40

	GPIOA->MODER &= ~(1 << 22);	//Set PA11 to use alternate function
 800014c:	23a0      	movs	r3, #160	; 0xa0
 800014e:	05db      	lsls	r3, r3, #23
 8000150:	681a      	ldr	r2, [r3, #0]
 8000152:	23a0      	movs	r3, #160	; 0xa0
 8000154:	05db      	lsls	r3, r3, #23
 8000156:	491d      	ldr	r1, [pc, #116]	; (80001cc <GPIO_Init+0xc8>)
 8000158:	400a      	ands	r2, r1
 800015a:	601a      	str	r2, [r3, #0]
	GPIOA->MODER &= ~(1 << 24);	//Set PA12 to use alternate function
 800015c:	23a0      	movs	r3, #160	; 0xa0
 800015e:	05db      	lsls	r3, r3, #23
 8000160:	681a      	ldr	r2, [r3, #0]
 8000162:	23a0      	movs	r3, #160	; 0xa0
 8000164:	05db      	lsls	r3, r3, #23
 8000166:	491a      	ldr	r1, [pc, #104]	; (80001d0 <GPIO_Init+0xcc>)
 8000168:	400a      	ands	r2, r1
 800016a:	601a      	str	r2, [r3, #0]
	GPIOD->MODER &= ~(1 << 16);	//Set PD8 to use alternate function
 800016c:	4b19      	ldr	r3, [pc, #100]	; (80001d4 <GPIO_Init+0xd0>)
 800016e:	681a      	ldr	r2, [r3, #0]
 8000170:	4b18      	ldr	r3, [pc, #96]	; (80001d4 <GPIO_Init+0xd0>)
 8000172:	4919      	ldr	r1, [pc, #100]	; (80001d8 <GPIO_Init+0xd4>)
 8000174:	400a      	ands	r2, r1
 8000176:	601a      	str	r2, [r3, #0]
	GPIOD->MODER &= ~(1 << 18);	//Set PD9 to use alternate function
 8000178:	4b16      	ldr	r3, [pc, #88]	; (80001d4 <GPIO_Init+0xd0>)
 800017a:	681a      	ldr	r2, [r3, #0]
 800017c:	4b15      	ldr	r3, [pc, #84]	; (80001d4 <GPIO_Init+0xd0>)
 800017e:	4917      	ldr	r1, [pc, #92]	; (80001dc <GPIO_Init+0xd8>)
 8000180:	400a      	ands	r2, r1
 8000182:	601a      	str	r2, [r3, #0]

	GPIOA->AFR[1] |= (0 << 12);	//Use AF0 (SPI1_MISO) on PA11
 8000184:	23a0      	movs	r3, #160	; 0xa0
 8000186:	05da      	lsls	r2, r3, #23
 8000188:	23a0      	movs	r3, #160	; 0xa0
 800018a:	05db      	lsls	r3, r3, #23
 800018c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800018e:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOA->AFR[1] |= (0 << 16);	//Use AF0 (SPI1_MOSI) on PA12
 8000190:	23a0      	movs	r3, #160	; 0xa0
 8000192:	05da      	lsls	r2, r3, #23
 8000194:	23a0      	movs	r3, #160	; 0xa0
 8000196:	05db      	lsls	r3, r3, #23
 8000198:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800019a:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOD->AFR[1] |= (1 << 0);	//Use AF1 (SPI1_SCK) on PD8
 800019c:	4b0d      	ldr	r3, [pc, #52]	; (80001d4 <GPIO_Init+0xd0>)
 800019e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001a0:	4b0c      	ldr	r3, [pc, #48]	; (80001d4 <GPIO_Init+0xd0>)
 80001a2:	2101      	movs	r1, #1
 80001a4:	430a      	orrs	r2, r1
 80001a6:	625a      	str	r2, [r3, #36]	; 0x24
	GPIOD->AFR[1] |= (1 << 4);	//Use AF1 (SPI1_NSS) on PD9
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <GPIO_Init+0xd0>)
 80001aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80001ac:	4b09      	ldr	r3, [pc, #36]	; (80001d4 <GPIO_Init+0xd0>)
 80001ae:	2110      	movs	r1, #16
 80001b0:	430a      	orrs	r2, r1
 80001b2:	625a      	str	r2, [r3, #36]	; 0x24

}
 80001b4:	46c0      	nop			; (mov r8, r8)
 80001b6:	46bd      	mov	sp, r7
 80001b8:	bd80      	pop	{r7, pc}
 80001ba:	46c0      	nop			; (mov r8, r8)
 80001bc:	40021000 	.word	0x40021000
 80001c0:	50000800 	.word	0x50000800
 80001c4:	f3ffffff 	.word	0xf3ffffff
 80001c8:	fffdffff 	.word	0xfffdffff
 80001cc:	ffbfffff 	.word	0xffbfffff
 80001d0:	feffffff 	.word	0xfeffffff
 80001d4:	50000c00 	.word	0x50000c00
 80001d8:	fffeffff 	.word	0xfffeffff
 80001dc:	fffbffff 	.word	0xfffbffff

080001e0 <SPI1_Config>:

void SPI1_Config(void) {
 80001e0:	b580      	push	{r7, lr}
 80001e2:	af00      	add	r7, sp, #0
	GPIOC->ODR |= (1 << 8);
 80001e4:	4b1c      	ldr	r3, [pc, #112]	; (8000258 <SPI1_Config+0x78>)
 80001e6:	695a      	ldr	r2, [r3, #20]
 80001e8:	4b1b      	ldr	r3, [pc, #108]	; (8000258 <SPI1_Config+0x78>)
 80001ea:	2180      	movs	r1, #128	; 0x80
 80001ec:	0049      	lsls	r1, r1, #1
 80001ee:	430a      	orrs	r2, r1
 80001f0:	615a      	str	r2, [r3, #20]

	SPI1->CR1 |= (1 << 2);	//Master configuration
 80001f2:	4b1a      	ldr	r3, [pc, #104]	; (800025c <SPI1_Config+0x7c>)
 80001f4:	681a      	ldr	r2, [r3, #0]
 80001f6:	4b19      	ldr	r3, [pc, #100]	; (800025c <SPI1_Config+0x7c>)
 80001f8:	2104      	movs	r1, #4
 80001fa:	430a      	orrs	r2, r1
 80001fc:	601a      	str	r2, [r3, #0]

	SPI1->CR1 |= (1 << 4);	//set baud rate to fclk / 8
 80001fe:	4b17      	ldr	r3, [pc, #92]	; (800025c <SPI1_Config+0x7c>)
 8000200:	681a      	ldr	r2, [r3, #0]
 8000202:	4b16      	ldr	r3, [pc, #88]	; (800025c <SPI1_Config+0x7c>)
 8000204:	2110      	movs	r1, #16
 8000206:	430a      	orrs	r2, r1
 8000208:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (0 << 0); //CPHA = 0
 800020a:	4a14      	ldr	r2, [pc, #80]	; (800025c <SPI1_Config+0x7c>)
 800020c:	4b13      	ldr	r3, [pc, #76]	; (800025c <SPI1_Config+0x7c>)
 800020e:	6812      	ldr	r2, [r2, #0]
 8000210:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (0 << 1); //CPOL = 0
 8000212:	4a12      	ldr	r2, [pc, #72]	; (800025c <SPI1_Config+0x7c>)
 8000214:	4b11      	ldr	r3, [pc, #68]	; (800025c <SPI1_Config+0x7c>)
 8000216:	6812      	ldr	r2, [r2, #0]
 8000218:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (0 << 10); //Full-duplex mode
 800021a:	4a10      	ldr	r2, [pc, #64]	; (800025c <SPI1_Config+0x7c>)
 800021c:	4b0f      	ldr	r3, [pc, #60]	; (800025c <SPI1_Config+0x7c>)
 800021e:	6812      	ldr	r2, [r2, #0]
 8000220:	601a      	str	r2, [r3, #0]
	SPI1->CR1 |= (0 << 7); //MSB transmitted first
 8000222:	4a0e      	ldr	r2, [pc, #56]	; (800025c <SPI1_Config+0x7c>)
 8000224:	4b0d      	ldr	r3, [pc, #52]	; (800025c <SPI1_Config+0x7c>)
 8000226:	6812      	ldr	r2, [r2, #0]
 8000228:	601a      	str	r2, [r3, #0]

	//CRC disabled

	SPI1->CR2 |= (7 << 8); //Data size = 8 bits
 800022a:	4b0c      	ldr	r3, [pc, #48]	; (800025c <SPI1_Config+0x7c>)
 800022c:	685a      	ldr	r2, [r3, #4]
 800022e:	4b0b      	ldr	r3, [pc, #44]	; (800025c <SPI1_Config+0x7c>)
 8000230:	21e0      	movs	r1, #224	; 0xe0
 8000232:	00c9      	lsls	r1, r1, #3
 8000234:	430a      	orrs	r2, r1
 8000236:	605a      	str	r2, [r3, #4]
	//SPI1->CR2 |= (1 << 12);	//RXNE event generated when fifo level is greater than or equal to 1/4 (8-bit)
	SPI1->CR2 |= (1 << 2); //SS output enabled in master mode
 8000238:	4b08      	ldr	r3, [pc, #32]	; (800025c <SPI1_Config+0x7c>)
 800023a:	685a      	ldr	r2, [r3, #4]
 800023c:	4b07      	ldr	r3, [pc, #28]	; (800025c <SPI1_Config+0x7c>)
 800023e:	2104      	movs	r1, #4
 8000240:	430a      	orrs	r2, r1
 8000242:	605a      	str	r2, [r3, #4]
	//RXNE event is generated if the FIFO level is greater than or equal to 1/2 (16-bit)

	//No CRC
	//No DMA

	SPI1->CR1 |= (1 << 6); //SPI enabled
 8000244:	4b05      	ldr	r3, [pc, #20]	; (800025c <SPI1_Config+0x7c>)
 8000246:	681a      	ldr	r2, [r3, #0]
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <SPI1_Config+0x7c>)
 800024a:	2140      	movs	r1, #64	; 0x40
 800024c:	430a      	orrs	r2, r1
 800024e:	601a      	str	r2, [r3, #0]
}
 8000250:	46c0      	nop			; (mov r8, r8)
 8000252:	46bd      	mov	sp, r7
 8000254:	bd80      	pop	{r7, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	50000800 	.word	0x50000800
 800025c:	40013000 	.word	0x40013000

08000260 <SPI1_SendString>:
	while((SPI1->SR & (1 << 7))); //wait for the BSY flag to clear
	GPIOC->ODR |= (1 << 8);

}

void SPI1_SendString (char * s) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b082      	sub	sp, #8
 8000264:	af00      	add	r7, sp, #0
 8000266:	6078      	str	r0, [r7, #4]
	GPIOC->ODR &= ~(1 << 8);
 8000268:	4b14      	ldr	r3, [pc, #80]	; (80002bc <SPI1_SendString+0x5c>)
 800026a:	695a      	ldr	r2, [r3, #20]
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <SPI1_SendString+0x5c>)
 800026e:	4914      	ldr	r1, [pc, #80]	; (80002c0 <SPI1_SendString+0x60>)
 8000270:	400a      	ands	r2, r1
 8000272:	615a      	str	r2, [r3, #20]
	while(*s != 0)
 8000274:	e00c      	b.n	8000290 <SPI1_SendString+0x30>
	{
		*((uint8_t*) &SPI1->DR) = *s;
 8000276:	4a13      	ldr	r2, [pc, #76]	; (80002c4 <SPI1_SendString+0x64>)
 8000278:	687b      	ldr	r3, [r7, #4]
 800027a:	781b      	ldrb	r3, [r3, #0]
 800027c:	7013      	strb	r3, [r2, #0]
		while(!(SPI1->SR & (1 << 1)));
 800027e:	46c0      	nop			; (mov r8, r8)
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <SPI1_SendString+0x68>)
 8000282:	689b      	ldr	r3, [r3, #8]
 8000284:	2202      	movs	r2, #2
 8000286:	4013      	ands	r3, r2
 8000288:	d0fa      	beq.n	8000280 <SPI1_SendString+0x20>
		s++;
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	3301      	adds	r3, #1
 800028e:	607b      	str	r3, [r7, #4]
	while(*s != 0)
 8000290:	687b      	ldr	r3, [r7, #4]
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d1ee      	bne.n	8000276 <SPI1_SendString+0x16>
	}
	while((SPI1->SR & (1 << 7))); //wait for the BSY flag to clear
 8000298:	46c0      	nop			; (mov r8, r8)
 800029a:	4b0b      	ldr	r3, [pc, #44]	; (80002c8 <SPI1_SendString+0x68>)
 800029c:	689b      	ldr	r3, [r3, #8]
 800029e:	2280      	movs	r2, #128	; 0x80
 80002a0:	4013      	ands	r3, r2
 80002a2:	d1fa      	bne.n	800029a <SPI1_SendString+0x3a>
	GPIOC->ODR |= (1 << 8);
 80002a4:	4b05      	ldr	r3, [pc, #20]	; (80002bc <SPI1_SendString+0x5c>)
 80002a6:	695a      	ldr	r2, [r3, #20]
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <SPI1_SendString+0x5c>)
 80002aa:	2180      	movs	r1, #128	; 0x80
 80002ac:	0049      	lsls	r1, r1, #1
 80002ae:	430a      	orrs	r2, r1
 80002b0:	615a      	str	r2, [r3, #20]

}
 80002b2:	46c0      	nop			; (mov r8, r8)
 80002b4:	46bd      	mov	sp, r7
 80002b6:	b002      	add	sp, #8
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)
 80002bc:	50000800 	.word	0x50000800
 80002c0:	fffffeff 	.word	0xfffffeff
 80002c4:	4001300c 	.word	0x4001300c
 80002c8:	40013000 	.word	0x40013000

080002cc <main>:


int main(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b082      	sub	sp, #8
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Init();
 80002d2:	f7ff ff17 	bl	8000104 <GPIO_Init>
	SPI1_Config();
 80002d6:	f7ff ff83 	bl	80001e0 <SPI1_Config>
	int pressed = 0;
 80002da:	2300      	movs	r3, #0
 80002dc:	607b      	str	r3, [r7, #4]

	while(1)
	{
		if(!((GPIOC -> IDR) & 0x2000) && pressed == 0)	//When button at PC13 is pressed, send SPI string
 80002de:	4b08      	ldr	r3, [pc, #32]	; (8000300 <main+0x34>)
 80002e0:	691a      	ldr	r2, [r3, #16]
 80002e2:	2380      	movs	r3, #128	; 0x80
 80002e4:	019b      	lsls	r3, r3, #6
 80002e6:	4013      	ands	r3, r2
 80002e8:	d1f9      	bne.n	80002de <main+0x12>
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d1f6      	bne.n	80002de <main+0x12>
		{
			SPI1_SendString("ALBERT");
 80002f0:	4b04      	ldr	r3, [pc, #16]	; (8000304 <main+0x38>)
 80002f2:	0018      	movs	r0, r3
 80002f4:	f7ff ffb4 	bl	8000260 <SPI1_SendString>
			pressed = 1;
 80002f8:	2301      	movs	r3, #1
 80002fa:	607b      	str	r3, [r7, #4]
		if(!((GPIOC -> IDR) & 0x2000) && pressed == 0)	//When button at PC13 is pressed, send SPI string
 80002fc:	e7ef      	b.n	80002de <main+0x12>
 80002fe:	46c0      	nop			; (mov r8, r8)
 8000300:	50000800 	.word	0x50000800
 8000304:	080003bc 	.word	0x080003bc

08000308 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000308:	480d      	ldr	r0, [pc, #52]	; (8000340 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800030a:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 800030c:	e000      	b.n	8000310 <Reset_Handler+0x8>
 800030e:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000310:	480c      	ldr	r0, [pc, #48]	; (8000344 <LoopForever+0x6>)
  ldr r1, =_edata
 8000312:	490d      	ldr	r1, [pc, #52]	; (8000348 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <LoopForever+0xe>)
  movs r3, #0
 8000316:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000318:	e002      	b.n	8000320 <LoopCopyDataInit>

0800031a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800031a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800031c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800031e:	3304      	adds	r3, #4

08000320 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000320:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000322:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000324:	d3f9      	bcc.n	800031a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000326:	4a0a      	ldr	r2, [pc, #40]	; (8000350 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000328:	4c0a      	ldr	r4, [pc, #40]	; (8000354 <LoopForever+0x16>)
  movs r3, #0
 800032a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800032c:	e001      	b.n	8000332 <LoopFillZerobss>

0800032e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800032e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000330:	3204      	adds	r2, #4

08000332 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000332:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000334:	d3fb      	bcc.n	800032e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000336:	f000 f811 	bl	800035c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800033a:	f7ff ffc7 	bl	80002cc <main>

0800033e <LoopForever>:

LoopForever:
    b LoopForever
 800033e:	e7fe      	b.n	800033e <LoopForever>
  ldr   r0, =_estack
 8000340:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000344:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000348:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 800034c:	080003cc 	.word	0x080003cc
  ldr r2, =_sbss
 8000350:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000354:	2000001c 	.word	0x2000001c

08000358 <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000358:	e7fe      	b.n	8000358 <ADC_COMP_IRQHandler>
	...

0800035c <__libc_init_array>:
 800035c:	b570      	push	{r4, r5, r6, lr}
 800035e:	2600      	movs	r6, #0
 8000360:	4d0c      	ldr	r5, [pc, #48]	; (8000394 <__libc_init_array+0x38>)
 8000362:	4c0d      	ldr	r4, [pc, #52]	; (8000398 <__libc_init_array+0x3c>)
 8000364:	1b64      	subs	r4, r4, r5
 8000366:	10a4      	asrs	r4, r4, #2
 8000368:	42a6      	cmp	r6, r4
 800036a:	d109      	bne.n	8000380 <__libc_init_array+0x24>
 800036c:	2600      	movs	r6, #0
 800036e:	f000 f819 	bl	80003a4 <_init>
 8000372:	4d0a      	ldr	r5, [pc, #40]	; (800039c <__libc_init_array+0x40>)
 8000374:	4c0a      	ldr	r4, [pc, #40]	; (80003a0 <__libc_init_array+0x44>)
 8000376:	1b64      	subs	r4, r4, r5
 8000378:	10a4      	asrs	r4, r4, #2
 800037a:	42a6      	cmp	r6, r4
 800037c:	d105      	bne.n	800038a <__libc_init_array+0x2e>
 800037e:	bd70      	pop	{r4, r5, r6, pc}
 8000380:	00b3      	lsls	r3, r6, #2
 8000382:	58eb      	ldr	r3, [r5, r3]
 8000384:	4798      	blx	r3
 8000386:	3601      	adds	r6, #1
 8000388:	e7ee      	b.n	8000368 <__libc_init_array+0xc>
 800038a:	00b3      	lsls	r3, r6, #2
 800038c:	58eb      	ldr	r3, [r5, r3]
 800038e:	4798      	blx	r3
 8000390:	3601      	adds	r6, #1
 8000392:	e7f2      	b.n	800037a <__libc_init_array+0x1e>
 8000394:	080003c4 	.word	0x080003c4
 8000398:	080003c4 	.word	0x080003c4
 800039c:	080003c4 	.word	0x080003c4
 80003a0:	080003c8 	.word	0x080003c8

080003a4 <_init>:
 80003a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003a6:	46c0      	nop			; (mov r8, r8)
 80003a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003aa:	bc08      	pop	{r3}
 80003ac:	469e      	mov	lr, r3
 80003ae:	4770      	bx	lr

080003b0 <_fini>:
 80003b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003b2:	46c0      	nop			; (mov r8, r8)
 80003b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003b6:	bc08      	pop	{r3}
 80003b8:	469e      	mov	lr, r3
 80003ba:	4770      	bx	lr
